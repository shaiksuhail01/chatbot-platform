generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projects Project[]

  @@map("users")
}

model Project {
  id           String   @id @default(cuid())
  name         String
  description  String?
  systemPrompt String?  @map("system_prompt")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  chats  Chat[]
  files  File[]

  @@map("projects")
}

model Chat {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projectId String    @map("project_id")
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@map("chats")
}

model Message {
  id        String   @id @default(cuid())
  role      String   // 'user' or 'assistant'
  content   String
  timestamp DateTime @default(now())

  // Relations
  chatId String @map("chat_id")
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model File {
  id           String   @id @default(cuid())
  filename     String
  originalName String   @map("original_name")
  mimeType     String   @map("mime_type")
  size         Int
  openaiFileId String?  @map("openai_file_id")
  status       String   @default("uploading") // uploading, processed, error
  errorMessage String?  @map("error_message")
  createdAt    DateTime @default(now())

  // Relations
  projectId String  @map("project_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)


  @@map("files")
}